#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# Backup to local storage - typically a USB drive

# License
# =======
#
# Copyright (C) 2015 Bob Mottram <bob@robotics.uk.to>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

PROJECT_NAME='freedombone'
COMPLETION_FILE=$HOME/${PROJECT_NAME}-completed.txt

export TEXTDOMAIN=${PROJECT_NAME}-backup-local
export TEXTDOMAINDIR="/usr/share/locale"

USB_DRIVE=/dev/sdb1
if [ $1 ]; then
    USB_DRIVE=/dev/${1}1
fi
USB_MOUNT=/mnt/usb

# get the admin user
ADMIN_USERNAME=$(cat $COMPLETION_FILE | grep "Admin user" | awk -F ':' '{print $2}')
if [ $2 ]; then
    ADMIN_USERNAME=$2
fi
ADMIN_NAME=$(getent passwd $ADMIN_USERNAME | cut -d: -f5 | cut -d, -f1)

# check that the backup destination is available
if [ ! -b $USB_DRIVE ]; then
    echo $"Please attach a USB drive"
    exit 1
fi

# unmount if already mounted
umount -f $USB_MOUNT
if [ ! -d $USB_MOUNT ]; then
    mkdir $USB_MOUNT
fi
if [ -f /dev/mapper/encrypted_usb ]; then
    rm -rf /dev/mapper/encrypted_usb
fi
cryptsetup luksClose encrypted_usb

# mount the encrypted backup drive
cryptsetup luksOpen $USB_DRIVE encrypted_usb
if [ "$?" = "0" ]; then
    USB_DRIVE=/dev/mapper/encrypted_usb
fi
mount $USB_DRIVE $USB_MOUNT
if [ ! "$?" = "0" ]; then
    echo $"There was a problem mounting the USB drive to $USB_MOUNT"
    rm -rf $USB_MOUNT
    exit 2
fi

# make a backup directory on the drive
if [ ! -d $USB_MOUNT/backup ]; then
    mkdir $USB_MOUNT/backup
fi
if [ ! -d $USB_MOUNT/backup ]; then
    echo $"There was a problem making the directory $USB_MOUNT/backup."
    umount $USB_MOUNT
    rm -rf $USB_MOUNT
    exit 3
fi

# Check space remaining on the usb drive
used_percent=$(df -k $USB_MOUNT | tail -n 1 | awk -F ' ' '{print $5}' | awk -F '%' '{print $1}')
if [ $used_percent -gt 95 ]; then
    echo $"Less than 5% of space remaining on backup drive"
    umount $USB_MOUNT
    rm -rf $USB_MOUNT
    exit 4
fi

# MariaDB password
DATABASE_PASSWORD=''
if [ -f /root/dbpass ]; then
    DATABASE_PASSWORD=$(cat /root/dbpass)
fi

function backup_database {
    if [ ${#DATABASE_PASSWORD} -lt 2 ]; then
        echo $"No MariaDB password was given"
        exit 10
    fi
    if [ ! -d $USB_MOUNT/backup/${1} ]; then
        mkdir -p $USB_MOUNT/backup/${1}
    fi
    if [ ! -d $USB_MOUNT/backup/${1}data ]; then
        mkdir -p $USB_MOUNT/backup/${1}data
    fi
    if [ ! -d /root/temp${1}data ]; then
        mkdir -p /root/temp${1}data
    fi
    echo $"Obtaining ${1} database backup"
    mysqldump --password="$DATABASE_PASSWORD" ${1} > /root/temp${1}data/${1}.sql
    if [ ! -s /root/temp${1}data/${1}.sql ]; then
        echo $"${1} database could not be saved"
        shred -zu /root/temp${1}data/*
        rm -rf /root/temp${1}data
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
        exit 5
    fi
}

function backup_directory_to_usb {
    if [ ! -d ${1} ]; then
        echo $"WARNING: directory does not exist: ${1}"
    else
        BACKUP_KEY_EXISTS=$(gpg --list-keys "$ADMIN_NAME (backup key)")
        if [ ! "$?" = "0" ]; then
            echo $"Backup key could not be found"
            exit 6
        fi
        MY_BACKUP_KEY_ID=$(gpg --list-keys "$ADMIN_NAME (backup key)" | grep 'pub ' | awk -F ' ' '{print $2}' | awk -F '/' '{print $2}')
        obnam force-lock -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID ${1}
        obnam backup -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID ${1}
        obnam forget --keep=30d -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID
        if [ ! "$?" = "0" ]; then
            umount $USB_MOUNT
            rm -rf $USB_MOUNT
            if [[ ${1} == "/root/temp"* || ${1} == *"tempbackup" ]]; then
                shred -zu ${1}/*
                rm -rf ${1}
            fi
            exit 7
        fi
        if [[ ${1} == "/root/temp"* || ${1} == *"tempbackup" ]]; then
            shred -zu ${1}/*
            rm -rf ${1}
        fi
    fi
}

# Backup user files
for d in /home/*/ ; do
    USERNAME=$(echo "$d" | awk -F '/' '{print $3}')
    if [[ $USERNAME != "git" ]]; then

        # Backup any gpg keys
        if [ -d /home/$USERNAME/.gnupg ]; then
            echo $"Backing up gpg keys for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/gnupg/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/gnupg/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/.gnupg gnupg/$USERNAME
        fi

        # Backup any personal settings
        if [ -d /home/$USERNAME/personal ]; then
            echo $"Backing up personal settings for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/personal/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/personal/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/personal personal/$USERNAME
        fi

        # Backup ssh keys
        if [ -d /home/$USERNAME/.ssh ]; then
            echo $"Backing up ssh keys for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/ssh/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/ssh/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/.ssh ssh/$USERNAME
        fi

        # Backup user configs
        if [ -d /home/$USERNAME/.config ]; then
            echo $"Backing up config files for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/config/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/config/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/.config config/$USERNAME
        fi

        # Backup mutt
        if [ -f /home/$USERNAME/.muttrc ]; then
            echo $"Backing up Mutt settings for $USERNAME"
            if [ ! -d /home/$USERNAME/tempbackup ]; then
                mkdir -p /home/$USERNAME/tempbackup
            fi
            cp /home/$USERNAME/.muttrc /home/$USERNAME/tempbackup
            if [ -f /etc/Muttrc ]; then
                cp /etc/Muttrc /home/$USERNAME/tempbackup
            fi
            if [ ! -d $USB_MOUNT/backup/mutt/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/mutt/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/tempbackup mutt/$USERNAME
        fi

        # Backup email
        if [ -d /home/$USERNAME/Maildir ]; then
            echo $"Creating an email archive for $USERNAME"
            if [ ! -d /root/tempbackupemail/$USERNAME ]; then
                mkdir -p /root/tempbackupemail/$USERNAME
            fi
            tar -czvf /root/tempbackupemail/$USERNAME/maildir.tar.gz /home/$USERNAME/Maildir
            echo $"Backing up emails for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/mail/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/mail/$USERNAME
            fi
            backup_directory_to_usb /root/tempbackupemail/$USERNAME mail/$USERNAME
        fi

        # Backup spamassassin
        if [ -d /home/$USERNAME/.spamassassin ]; then
            echo $"Backing up spamassassin settings for $USERNAME"
            if [ ! -d $USB_MOUNT/backup/spamassassin/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/spamassassin/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/.spamassassin spamassassin/$USERNAME
        fi

        # Backup procmail
        if [ -f /home/$USERNAME/.procmailrc ]; then
            echo $"Backing up procmail settings for $USERNAME"
            if [ ! -d /home/$USERNAME/tempbackup ]; then
                mkdir -p /home/$USERNAME/tempbackup
            fi
            cp /home/$USERNAME/.procmailrc /home/$USERNAME/tempbackup
            if [ ! -d $USB_MOUNT/backup/procmail/$USERNAME ]; then
                mkdir -p $USB_MOUNT/backup/procmail/$USERNAME
            fi
            backup_directory_to_usb /home/$USERNAME/tempbackup procmail/$USERNAME
        fi

    fi
done

# Backup Let's Encrypt
if [ -d /etc/letsencrypt ]; then
    echo $"Backing up Lets Encrypt settings"
    backup_directory_to_usb /etc/letsencrypt letsencrypt
fi

# backup gnusocial
if grep -q "GNU Social domain" $COMPLETION_FILE; then
    MICROBLOG_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "GNU Social domain" | awk -F ':' '{print $2}')
    if [ -d /var/www/${MICROBLOG_DOMAIN_NAME} ]; then
        backup_database gnusocial
        backup_directory_to_usb /root/tempgnusocialdata gnusocialdata
        echo $"Backing up GNU social installation"
        backup_directory_to_usb /var/www/${MICROBLOG_DOMAIN_NAME}/htdocs gnusocial
    else
        echo $"GNU Social domain specified but not found in /var/www/${MICROBLOG_DOMAIN_NAME}"
        exit 6327
    fi
fi

# backup hubzilla
if grep -q "Hubzilla domain" $COMPLETION_FILE; then
    HUBZILLA_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Hubzilla domain" | awk -F ':' '{print $2}')
    if [ -d /var/www/${HUBZILLA_DOMAIN_NAME} ]; then
        backup_database hubzilla
        backup_directory_to_usb /root/temphubzilladata hubzilladata
        echo $"Backing up Hubzilla installation"
        backup_directory_to_usb /var/www/${HUBZILLA_DOMAIN_NAME}/htdocs hubzilla
    else
        echo $"Hubzilla domain specified but not found in /var/www/${HUBZILLA_DOMAIN_NAME}"
        exit 2578
    fi
fi

# backup owncloud
if [ -d /etc/owncloud ]; then
    if [ ! -d $USB_MOUNT/backup/owncloud2 ]; then
        mkdir -p $USB_MOUNT/backup/owncloud2
    fi
    backup_database owncloud
    backup_directory_to_usb /root/tempownclouddata ownclouddata
    echo $"Obtaining Owncloud data backup"
    backup_directory_to_usb /var/lib/owncloud owncloud
    backup_directory_to_usb /etc/owncloud owncloud2
fi

# backup gogs
if [ -d /home/git/go/src/github.com/gogits ]; then
    if [ ! -d $USB_MOUNT/backup/gogsrepos ]; then
        mkdir -p $USB_MOUNT/backup/gogsrepos
    fi
    if [ ! -d $USB_MOUNT/backup/gogsssh ]; then
        mkdir -p $USB_MOUNT/backup/gogsssh
    fi
    backup_database gogs
    backup_directory_to_usb /root/tempgogsdata gogsdata
    echo $"Obtaining Gogs settings backup"
    backup_directory_to_usb /home/git/go/src/github.com/gogits/gogs/custom gogs
    echo $"Obtaining Gogs repos backup"
    mv /home/git/gogs-repositories/*.git /home/git/gogs-repositories/$ADMIN_USERNAME
    backup_directory_to_usb /home/git/gogs-repositories gogsrepos
    echo $"Obtaining Gogs authorized_keys backup"
    backup_directory_to_usb /home/git/.ssh gogsssh
fi

# Backup wiki
if [ -d /etc/dokuwiki ]; then
    if [ ! -d $USB_MOUNT/backup/wiki ]; then
        mkdir -p $USB_MOUNT/backup/wiki
    fi
    if [ ! -d $USB_MOUNT/backup/wiki2 ]; then
        mkdir -p $USB_MOUNT/backup/wiki2
    fi
    echo $"Obtaining wiki data backup"
    backup_directory_to_usb /var/lib/dokuwiki wiki
    backup_directory_to_usb /etc/dokuwiki wiki2
fi

# Backup blog
if grep -q "Blog domain" $COMPLETION_FILE; then
    FULLBLOG_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Blog domain" | awk -F ':' '{print $2}')
    if [ -d /var/www/${FULLBLOG_DOMAIN_NAME} ]; then
        if [ ! -d $USB_MOUNT/backup/blog ]; then
            mkdir -p $USB_MOUNT/backup/blog
        fi
        echo $"Obtaining blog backup"
        backup_directory_to_usb /var/www/${FULLBLOG_DOMAIN_NAME}/htdocs blog
    else
        echo $"Blog domain specified but not found in /var/www/${FULLBLOG_DOMAIN_NAME}"
        exit 2578
    fi
    fi
fi

# Backup certificates
if [ -d /etc/ssl ]; then
    echo $"Backing up certificates"
    if [ ! -d $USB_MOUNT/backup/ssl ]; then
        mkdir -p $USB_MOUNT/backup/ssl
    fi
    backup_directory_to_usb /etc/ssl ssl
fi

# Backup the public mailing list
if [ -d /var/spool/mlmmj ]; then
    echo $"Backing up the public mailing list"
    if [ ! -d $USB_MOUNT/backup/mailinglist ]; then
        mkdir -p $USB_MOUNT/backup/mailinglist
    fi
    backup_directory_to_usb /var/spool/mlmmj mailinglist
fi

# Backup xmpp settings
if [ -d /var/lib/prosody ]; then
    echo $"Backing up the XMPP settings"
    if [ ! -d $USB_MOUNT/backup/xmpp ]; then
        mkdir -p $USB_MOUNT/backup/xmpp
    fi
    backup_directory_to_usb /var/lib/prosody xmpp
fi

# Backup web sites
if [ -d /etc/nginx ]; then
    echo $"Backing up web settings"
    if [ ! -d $USB_MOUNT/backup/web ]; then
        mkdir -p $USB_MOUNT/backup/web
    fi
    backup_directory_to_usb /etc/nginx/sites-available web
fi

# Backup admin user README file
if [ -f /home/$ADMIN_USERNAME/README ]; then
    echo $"Backing up README"
    if [ ! -d $USB_MOUNT/backup/readme ]; then
        mkdir -p $USB_MOUNT/backup/readme
    fi
    if [ ! -d /home/$ADMIN_USERNAME/tempbackup ]; then
        mkdir -p /home/$ADMIN_USERNAME/tempbackup
    fi
    cp -f /home/$ADMIN_USERNAME/README /home/$ADMIN_USERNAME/tempbackup
    backup_directory_to_usb /home/$ADMIN_USERNAME/tempbackup readme
fi

# Backup IPFS
if [ -d /home/$ADMIN_USERNAME/.ipfs ]; then
    echo $"Backing up IPFS"
    if [ ! -d $USB_MOUNT/backup/ipfs ]; then
        mkdir -p $USB_MOUNT/backup/ipfs
    fi
    backup_directory_to_usb /home/$ADMIN_USERNAME/.ipfs ipfs
fi

# Backup DLNA cache
if [ -d /var/cache/minidlna ]; then
    echo $"Backing up DLNA cache"
    if [ ! -d $USB_MOUNT/backup/dlna ]; then
        mkdir -p $USB_MOUNT/backup/dlna
    fi
    backup_directory_to_usb /var/cache/minidlna dlna
fi

# Backup VoIP settings
if [ -f /etc/mumble-server.ini ]; then
    echo $"Backing up VoIP settings"
    if [ ! -d /root/tempvoipbackup ]; then
        mkdir -p /root/tempvoipbackup
    fi
    cp -f /etc/mumble-server.ini /root/tempvoipbackup
    cp -f /var/lib/mumble-server/mumble-server.sqlite /root/tempvoipbackup
    cp -f /etc/sipwitch.conf /root/tempvoipbackup
    if [ ! -d $USB_MOUNT/backup/voip ]; then
        mkdir -p $USB_MOUNT/backup/voip
    fi
    backup_directory_to_usb /root/tempvoipbackup voip
fi

# MariaDB settings
if [ ${#DATABASE_PASSWORD} -gt 1 ]; then
    if [ ! -d $USB_MOUNT/backup/mariadb ]; then
        mkdir -p $USB_MOUNT/backup/mariadb
    fi
    if [ ! -d /root/tempmariadb ]; then
        mkdir /root/tempmariadb
    fi
    mysqldump --password="$DATABASE_PASSWORD" mysql user > /root/tempmariadb/mysql.sql
    if [ ! -s /root/tempmariadb/mysql.sql ]; then
        echo $"Unable to backup mysql settings"
        rm -rf /root/tempmariadb
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
        exit 8
    fi
    echo "$DATABASE_PASSWORD" > /root/tempmariadb/db
    chmod 400 /root/tempmariadb/db
    backup_directory_to_usb /root/tempmariadb mariadb
fi

# Backup Tox node settings
if [ -d /var/lib/tox-bootstrapd ]; then
    echo $"Backing up Tox node settings"
    if [ ! -d $USB_MOUNT/backup/tox ]; then
        mkdir -p $USB_MOUNT/backup/tox
    fi
    cp /etc/tox-bootstrapd.conf /var/lib/tox-bootstrapd
    if [ -d /var/lib/tox-bootstrapd/Maildir ]; then
        rm -rf /var/lib/tox-bootstrapd/Maildir
    fi
    backup_directory_to_usb /var/lib/tox-bootstrapd tox
fi

sync
umount $USB_MOUNT
if [ ! "$?" = "0" ]; then
    echo $"Unable to unmount the drive. This means that the backup did not work"
    rm -rf $USB_MOUNT
    exit 9
fi
rm -rf $USB_MOUNT
if [[ $USB_DRIVE == /dev/mapper/encrypted_usb ]]; then
    echo $"Unmount encrypted USB"
    cryptsetup luksClose encrypted_usb
fi
if [ -f /dev/mapper/encrypted_usb ]; then
    rm -rf /dev/mapper/encrypted_usb
fi
echo $"Backup to USB drive is complete. You can now unplug it."
exit 0
