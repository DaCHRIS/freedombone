#+TITLE:
#+AUTHOR: Bob Mottram
#+EMAIL: bob@robotics.uk.to
#+KEYWORDS: freedombox, debian, beaglebone, hubzilla, email, web server, home server, internet, censorship, surveillance, social network, irc, jabber
#+DESCRIPTION: Turn the Beaglebone Black into a personal communications server
#+OPTIONS: ^:nil toc:nil
#+BEGIN_CENTER
[[./images/logo.png]]
#+END_CENTER

#+BEGIN_CENTER
#+ATTR_HTML: :border -1
| [[file:index.html][Home]]                                                                       |
| [[I don't have a static IP address. Can I still install this system?]]         |
| [[What is the best hardware to run this system on?]]                           |
| [[Can I add more users to the system?]]                                        |
| [[How do I remove a user from the system?]]                                    |
| [[How do I reset the tripwire?]]                                               |
| [[Is metadata protected?]]                                                     |
| [[How do I create email processing rules?]]                                    |
| [[Why isn't dynamic DNS working?]]                                             |
| [[How do I change my encryption settings?]]                                    |
| [[How do I get a domain name?]]                                                |
| [[How do I get a "real" SSL certificate?]]                                     |
| [[How do I renew a StartSSL certificate?]]                                     |
| [[Why use self-signed certificates?]]                                          |
| [[Why not use the services of $company instead? They took the Seppuku pledge]] |
| [[Why does my email keep getting rejected as spam by Gmail/etc?]]              |
#+END_CENTER

* Why not supply a disk image download?
Shipping a Freedombone disk image ready to install on a flash disk would be easy, but disk images are relatively opaque. It would be quite easy to hide something nasty within a disk image and the user might never know. To guard against that possibility installing via the *freedombone* command is a lot more transparent, since it's really just a bash script. You can check the script code to see exactly what it's doing, and the packages are all downloaded from standard Debian repos (you can even choose which one you trust) or git repos. Doing it this way the system is fully auditable, whereas when shipping a disk image it's harder to be confident that no nefarious extras have been added.
* I don't have a static IP address. Can I still install this system?
Yes. The minimum requirements are to have some hardware that you can install Debian onto and also that you have administrator access to your internet router so that you can forward ports to the system which has Freedombone installed.

The lack of a static IP address can be worked around by using a dynamic DNS service. Freedombone uses [[http://troglobit.com/inadyn.html][inadyn]], which supports a variety of dynamic DNS providers.
* What is the best hardware to run this system on?
It was originally designed to run on the Beaglebone Black, but that should be regarded as the most minimal system, because it's single core and has by today's standards a small amount of memory. Obviously the more powerful the hardware is the faster things like web pages (blog, social networking, etc) will be served but the more electricity such a system will require if you're running it 24/7. A good compromise between performance and energy consumption is something like an old netbook. The battery of an old netbook or laptop even gives you [[https://en.wikipedia.org/wiki/Uninterruptible_power_supply][UPS capability]] to keep the system going during brief power outages or cable re-arrangements, and that means using full disk encryption on the server also becomes more practical.

/Out of fashion/ but still working computer hardware tends to be cheap and readily available, yet still good for providing internet services.
* Can I add more users to the system?
Yes. Freedombone can support a small number of users, for a "/friends and family/" type of home installation. This gives them access to an email account, XMPP, SIP phone and the blog (depending on whether the variant which you installed includes those).

#+BEGIN_SRC bash
ssh username@mydomainname -p 2222
su
control
#+END_SRC

Select /Manage Users/ and then /Add a user/. You will be prompted for a username and you can also optionally provide their ssh public key.

Something to consider when having more than a single user on the system is the security situation. The original administrator user will have access to all of the data for other users (including their encryption keys), so if you do add extra users they need to have *complete trust* in the administrator.

Another point is that Freedombone installations are not intended to support many users (maybe ten at most). Large numbers of users may make the system unstable, and the more users you have on one system the more it becomes a single point of failure and also perhaps a honeypot from the standpoint of adversaries. Think of what happened with Lavabit and the moral dilemma which an administrator can be faced with (comply with threats and betray the trust of your users or don't comply and suffer other consequences). Ideally, you never want to put yourself into a situation where you can be forced to betray others.
* How do I remove a user from the system?
To remove a user:

#+BEGIN_SRC bash
ssh username@mydomainname -p 2222
su
control
#+END_SRC

Select /Manage Users/ and then /Delete a user/. Note that this will delete all of that user's files and email.
* How do I reset the tripwire?
The tripwire will be automatically reset once per week. If you want to reset it earlier then do the following:

#+BEGIN_SRC bash
ssh username@mydomain -p 2222
su
control
#+END_SRC

Select "reset tripwire" using cursors and space bar then enter.
* Is metadata protected?
Even when using Freedombone metadata analysis by third parties is still possible. They might have a much harder time knowing what the content is, but they can potentially construct extensive dossiers based upon who communicated with your server when.  Metadata leakage is a general problem with most current web systems and it is hoped that more secure technology will become available in future. But for now if metadata protection is your main concern using Freedombone on its own won't help. You may be able to use Tor Messenger to protect the metadata of XMPP chat communications to some extent.
* How do I create email processing rules?
#+BEGIN_SRC bash
ssh username@domainname -p 2222
su
control
#+END_SRC

Select /Email Filtering Rules/ then you can add rules to be applied to incoming email addresses or mailing lists. If you prefer to do things directly on the command line, without the control panel, then the following commands are available:

| freedombone-addlist  | Adds a mailing list                                                  |
| freedombone-rmlist   | Removes a mailing list                                               |
| freedombone-addemail | Transfers emails from an address to a given folder                   |
| freedombone-rmemail  | Removes an email transferal rule                                     |
| freedombone-ignore   | Ignores email from an address or with a subject line containing text |
| freedombone-unignore | Removes an ignore rule                                               |

Spamassassin is also available and within Mutt you can use the S (shift+s) key to mark an email as spam or the H (shift+h) key to mark an email as not being spam. So by using a combination of email rules and spam filtering you should be able to avoid any spammers or trolls.
* Why isn't dynamic DNS working?
If you run the command:

#+BEGIN_SRC bash
service inadyn status
#+END_SRC

And see some error related to checking for changes in the IP address then you can try other external IP services. Edit */etc/inadyn.conf* and change the domain for the *checkip-url* parameter. Possible sites are:

#+BEGIN_SRC bash
https://check.torproject.org/
https://www.whatsmydns.net/whats-my-ip-address.html
https://www.privateinternetaccess.com/pages/whats-my-ip/
http://checkip.two-dns.de
http://ip.dnsexit.com
http://ifconfig.me/ip
http://ipecho.net/plain
http://checkip.dyndns.org/plain
http://ipogre.com/linux.php
http://whatismyipaddress.com/
http://ip.my-proxy.com/
http://websiteipaddress.com/WhatIsMyIp
http://getmyipaddress.org/
http://www.my-ip-address.net/
http://myexternalip.com/raw
http://www.canyouseeme.org/
http://www.trackip.net/
http://icanhazip.com/
http://www.iplocation.net/
http://www.howtofindmyipaddress.com/
http://www.ipchicken.com/
http://whatsmyip.net/
http://www.ip-adress.com/
http://checkmyip.com/
http://www.tracemyip.org/
http://checkmyip.net/
http://www.lawrencegoetz.com/programs/ipinfo/
http://www.findmyip.co/
http://ip-lookup.net/
http://www.dslreports.com/whois
http://www.mon-ip.com/en/my-ip/
http://www.myip.ru
http://ipgoat.com/
http://www.myipnumber.com/my-ip-address.asp
http://www.whatsmyipaddress.net/
http://formyip.com/
http://www.displaymyip.com/
http://www.bobborst.com/tools/whatsmyip/
http://www.geoiptool.com/
http://checkip.dyndns.com/
http://myexternalip.com/
http://www.ip-adress.eu/
http://www.infosniper.net/
http://wtfismyip.com/
http://ipinfo.io/
http://httpbin.org/ip
#+END_SRC

* How do I change my encryption settings?
Suppose that some new encryption vulnerability has been announced and that you need to change your encryption settings. Maybe an algorithm thought to be secure is now no longer so and you need to remove it. You can change your settings by doing the following:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
su
control
#+END_SRC

Then select /Security Settings/. You will then be able to edit the crypto settings for all of the installed applications. *Be very careful when editing*, since any mistake could make your system less secure rather than more.
* How do I get a domain name?
Suppose that you have bought a domain name (rather than using a free subdomain on freedns) and you want to use that instead.

Remove any existing nameservers for your domain (or select "custom" nameservers), then add:

#+BEGIN_SRC bash
NS1.AFRAID.ORG
NS2.AFRAID.ORG
NS3.AFRAID.ORG
NS4.AFRAID.ORG
#+END_SRC

It might take a few minutes for the above change to take effect.  Within freedns click on "Domains" and add your domains (this might only be available to paid members).  Make sure that they're marked as "private".

Select "Subdomains" from the menu on the left then select the MX entry for your domain and change the destination to *10:mydomainname* rather than *10:mail.mydomainname*.

To route email to one of your freedns domains:

#+BEGIN_SRC bash
editor /etc/mailname
#+END_SRC

Add any extra domains which you own, then save and exit.

#+BEGIN_SRC bash
editor /etc/exim4/update-exim4.conf.conf
#+END_SRC

Within dc_other_hostnames add your extra domain names, separated by a colon ':' character.

Save and exit, then restart exim.

#+BEGIN_SRC bash
update-exim4.conf.template -r
update-exim4.conf
service exim4 restart
#+END_SRC

You should now be able to send an email from /postmaster@mynewdomainname/ and it should arrive in your inbox.

* How do I get a "real" SSL certificate?
You can obtain a free "official" (as in recognised by default by web browsers) SSL certificate from [[https://www.startssl.com/][StartSSL]]. You will first need to have bought a domain name, since it's not possible to obtain one for a freedns subdomain, so see [[How do I get a domain name?][Using your own domain]] for details of how to do that.  You should also have tested that you can send email to the domain and receive it on the Freedombone (via Mutt or any other email client).

When creating a SSL certificate it's important that the private key (the private component of the public/private pair in [[https://en.wikipedia.org/wiki/Public-key_cryptography][public key cryptography]]) be generated on the Freedombone /and remain there/.  Don't generate the private key via the StartSSL certificate wizard because this means that potentially they may retain a copy of it which could then be exfiltrated either via [[https://en.wikipedia.org/wiki/Lavabit][Lavabit]] style methodology, "implants", compromised sysadmins or other "side channel" methods.  So that the private key isn't broadcast on the internet we can instead generate a certificate request, which is really just a request for authorisation of a public key.

Within StartSSL under the validations wizard validate your domain, which means sending an email to it and confirming a code.

Now we can generate the certificate request as follows.

#+BEGIN_SRC bash
export HOSTNAME=mydomainname.com
openssl genrsa -out /etc/ssl/private/$HOSTNAME.key 2048
chown root:ssl-cert /etc/ssl/private/$HOSTNAME.key
chmod 440 /etc/ssl/private/$HOSTNAME.key
mkdir /etc/ssl/requests
#+END_SRC

Now make a certificate request as follows.  You should copy and paste the whole of this, not just line by line.

#+BEGIN_SRC bash
openssl req -new -sha256 -key /etc/ssl/private/$HOSTNAME.key -out /etc/ssl/requests/$HOSTNAME.csr
#+END_SRC

For the email address it's a good idea to use postmaster@mydomainname.

Use a random 20 character password, and keep a note of it.  We'll remove this later.

View the request with:

#+BEGIN_SRC bash
cat /etc/ssl/requests/$HOSTNAME.csr
#+END_SRC

You can then click on "skip" within the StartSSL certificates wizard and copy and paste the encrypted request into the text entry box.  A confirmation will be emailed back to you normally within a few hours.

Log into your StartSSL account and select *Retrieve Certificate* from the *Tool Box* tab.  Copy the text.

#+BEGIN_SRC bash
editor /etc/ssl/certs/$HOSTNAME.crt
#+END_SRC

Paste the public key, then save and exit.  Then on the Freedombone.

#+BEGIN_SRC bash
mkdir /etc/ssl/roots
mkdir /etc/ssl/chains
wget "http://www.startssl.com/certs/ca.pem" --output-document="/etc/ssl/roots/startssl-root.ca"
wget "http://www.startssl.com/certs/sub.class1.server.ca.pem" --output-document="/etc/ssl/chains/startssl-sub.class1.server.ca.pem"
wget "http://www.startssl.com/certs/sub.class2.server.ca.pem" --output-document="/etc/ssl/chains/startssl-sub.class2.server.ca.pem"
wget "http://www.startssl.com/certs/sub.class3.server.ca.pem" --output-document="/etc/ssl/chains/startssl-sub.class3.server.ca.pem"
ln -s "/etc/ssl/roots/startssl-root.ca" "/etc/ssl/roots/$HOSTNAME-root.ca"
ln -s "/etc/ssl/chains/startssl-sub.class1.server.ca.pem" "/etc/ssl/chains/$HOSTNAME.ca"
cp "/etc/ssl/certs/$HOSTNAME.crt" "/etc/ssl/certs/$HOSTNAME.crt+chain+root"
test -e "/etc/ssl/chains/$HOSTNAME.ca" && cat "/etc/ssl/chains/$HOSTNAME.ca" >> "/etc/ssl/certs/$HOSTNAME.crt+chain+root"
test -e "/etc/ssl/roots/$HOSTNAME-root.ca" && cat "/etc/ssl/roots/$HOSTNAME-root.ca" >> "/etc/ssl/certs/$HOSTNAME.crt+chain+root"
#+END_SRC

To avoid any possibility of the certificates being accidentally overwritten by self-signed ones at a later date you can create backups.

#+BEGIN_SRC bash
mkdir /etc/ssl/backups
mkdir /etc/ssl/backups/certs
mkdir /etc/ssl/backups/private
cp /etc/ssl/certs/$HOSTNAME* /etc/ssl/backups/certs/
cp /etc/ssl/private/$HOSTNAME* /etc/ssl/backups/private/
chmod -R 400 /etc/ssl/backups/certs/*
chmod -R 400 /etc/ssl/backups/private/*
#+END_SRC

Remove the certificate password, so if the server is rebooted then it won't wait indefinitely for a non-existant keyboard user to type in a password.

#+BEGIN_SRC bash
openssl rsa -in /etc/ssl/private/$HOSTNAME.key -out /etc/ssl/private/$HOSTNAME.new.key
cp /etc/ssl/private/$HOSTNAME.new.key /etc/ssl/private/$HOSTNAME.key
shred -zu /etc/ssl/private/$HOSTNAME.new.key
#+END_SRC

Create a bundled certificate which joins the certificate and chain file together.

#+BEGIN_SRC bash
cat /etc/ssl/certs/$HOSTNAME.crt /etc/ssl/chains/startssl-sub.class1.server.ca.pem > /etc/ssl/certs/$HOSTNAME.bundle.crt
#+END_SRC

And also add it to the overall bundle of certificates for the Freedombone. This will allow you to easily install the certificates onto other systems.

#+BEGIN_SRC bash
mkdir /etc/ssl/mycerts
cp /etc/ssl/certs/$HOSTNAME.bundle.crt /etc/ssl/mycerts
cat /etc/ssl/mycerts/*.crt > /etc/ssl/freedombone-bundle.crt
tar -czvf /etc/ssl/freedombone-certs.tar.gz /etc/ssl/mycerts/*.crt
#+END_SRC

Edit your configuration file.

#+BEGIN_SRC bash
editor /etc/nginx/sites-available/$HOSTNAME
#+END_SRC

Add the following to the section which starts with *listen 443*

#+BEGIN_SRC bash
    ssl_certificate /etc/ssl/certs/mydomainname.com.bundle.crt;
#+END_SRC

Save and exit, then restart the web server.

#+BEGIN_SRC bash
service nginx restart
#+END_SRC

Now visit your web site at https://mydomainname.com and you should notice that there is no certificate warning displayed.  You will now be able to install systems which don't allow the use of self-signed certificates, such as [[https://github.com/redmatrix/hubzilla][Hubzilla]].

* How do I renew a StartSSL certificate?
The StartSSL certificates last for a year. You can check the expiry date of your current certificate/s by going to your site and if you're using Firefox then click on the *lock icon*, select "*more information*" then "*view certificate*".

Before changing any certificates it's a good idea to make a backup of the existing system. Use /Backup and Restore/ from the control panel to make a backup of the system to a USB drive. Backing up may take a while, but it ensures that if anything goes wrong and you mess up the certificates then there is a way to restore the previous ones.

Make sure that you have the StartSSL certificate which was created when you initially made an account. You did save it somewhere safe, didn't you? If it's not installed into your browser then in Firefox go to *Menu/Preferences/Advanced/View Certificates*. Make sure the "*Your Cerificates*" tab is selected and click "*import*", then import the StartSSL certificate.

Now go to [[https://startssl.com][startssl.com]] and click on the keys icon on the right hand side to log in. Select the *Control panel* then *Validations Wizard* and choose *Email address validation*. Enter your email address, then wait for the validation email to show up in your inbox. It will contain a code when you can then enter.

Once your email is validated then go to *Validations Wizard* and choose *Domain name validation*. Enter your domain name and select *postmaster@yourdomainname*. After a while you should receive a validation email and you can then enter the code.

Log in to the Freedombone, become the root user, then issue the renew command:

#+BEGIN_SRC bash
ssh username@mydomainname -p 2222
su
freedombone-renew-cert -h mydomainname -p startssl
#+END_SRC

For the email address it's a good idea to use /postmaster@mydomainname/.

Use a random 20 character password, and keep a note of it.  We'll remove this later.

On the StartSSL site select *Certificates Wizard* then *Web server SSL/TLS Certificate*. You can then click on "skip" and then copy and paste the certificate request into the text entry box. You may now need to wait a few hours for a confirmation email indicating that the new certificate was created.

Select *Tool Box* and then *Retrieve Certificate* from the list. Make sure to choose the one with the correct expiration date.  Copy the text, then on the Freedombone.

#+BEGIN_SRC bash
editor /etc/ssl/certs/mydomainname.new.crt
#+END_SRC

Paste the public key from the StartSSL site. Save and exit.  Then run the renew command again:

#+BEGIN_SRC bash
freedombone-renew-cert -h mydomainname
#+END_SRC

The new certificate will then be installed.
* Why use self-signed certificates?
Almost everywhere on the web you will read that self-signed certificates are worthless. They bring up scary looking browser warnings and gurus will advise you not to use them. Self-signed certificates are quite useful though. What the scary warnings mean - and it would be good if they explained this more clearly - is that you have an encrypted connection established but there is /no certainty about who that connection is with/. The usual solution to this is to get a "real" SSL certificate from one of the certificate authorities, but it's far from clear that such authorities can be trusted. There have been various scandals involving such organisations, and it does not seem plausible to assume that they are somehow immune to the sort of treatment which [[http://en.wikipedia.org/wiki/Lavabit][Lavabit]] received. So although most internet users have been trained to look for the lock icon as an indication that the connection is secured that belief may not always be well founded.

Security of web sites on the internet is still a somewhat unsolved problem, and what we have now is a less than ideal but /good enough to fool most of the people most of the time/ kind of arrangement. Long term a better solution might be to have a number of certificate authorities in a number of different jurisdictions vote on whether a given certificate actually belongs to a given domain name. Experimental systems like this exist, but they're not widely used. Since the current certificate system has an enormous amount of inertia behind it change could be slow in arriving.

For now a self-signed certificate will probably in most cases protect your communications from "bulk" passive surveillance. Once you've got past the scary browser warning and accepted the certificate under most conditions (except when starting up the Tor browser) you should not repeatedly see that warning. If you do then someone may be trying to meddle with your connection to the server. You can also take a note of the fingerprint of the certificate and verify that if you are especially concerned. If the fingerprint remains the same then you're probably ok.
* Why not use the services of $company instead? They took the Seppuku pledge
[[http://seppuku.cryptostorm.org][That pledge]] is utterly worthless. Years ago people trusted Google in the same sort of way, because they promised not be be evil and because a lot of the engineers working for them seemed like honest types who were "/on our side/". Post-[[https://en.wikipedia.org/wiki/Nymwars][nymwars]] and post-[[https://en.wikipedia.org/wiki/PRISM_%28surveillance_program%29][PRISM]] we know exactly how much Google cared about the privacy and security of its users. But Google is only one particular example. In general don't trust pledges made by companies, even if the people running them seem really sincere.
* Why does my email keep getting rejected as spam by Gmail/etc?
Welcome to the world of email. Email is really the archetypal decentralized service, developed during the early days of the internet. In principle anyone can run an email server, and that's exactly what you're doing with Freedombone. Email is very useful, but it has a big problem, and that's that the protocols are totally insecure. That made it easy for spammers to do their thing, and in response highly elaborate spam filtering and blocking systems were developed. Chances are that your emails are being blocked in this way. Sometimes the blocking is so indisciminate that entire countries are excluded. What can you do about it? Unless you control the block list at the receiving end probably you can't do anything. There is zero accountability for such blocking, and you can't just contact someone and say "hey, I'm not a spammer". This system works well for the big internet companies because it effectively centralises email to a few well-known brand names and keeps any independent servers out.

So the situation with email presently is pretty bad, and there's a clear selection pressure against decentralization and towards only a few companies controlling all email services. Longer term the solution is to have more secure protocols which make spamming hard or expensive. Bitmessage is one such system. As an immediate practical workaround you could try buying a domain name and then linking it to your dynamic DNS account (freeDNS, etc) in the hope that the blocking is against dynamic DNS domain names, but there is no guarantee that will work and often blocking may be based upon IP address ranges about which there is little you can do.
